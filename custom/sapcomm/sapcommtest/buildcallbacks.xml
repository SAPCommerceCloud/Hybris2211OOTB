<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
--><!--
 All hybris buildcallbacks.xml macrodefinitions:

 Build/Documentation

	 before/after ant macro "clean"
		 <macrodef name="sapcommtest_before_clean"/>
		 <macrodef name="sapcommtest_after_clean"/>

	 before/after ant macro "build"
		 <macrodef name="sapcommtest_before_build"/>
		 <macrodef name="sapcommtest_after_build"/>

	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="sapcommtest_before_compile_core">
		 <macrodef name="sapcommtest_after_compile_core">

	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="sapcommtest_before_compile_web" />
		 <macrodef name="sapcommtest_after_compile_web" />

 Preparing extension

	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)
		 <macrodef name="sapcommtest_only_once_prepare"/>

 Creating ear module/production

	 before/after ant macro "ear"
		 <macrodef name="sapcommtest_before_ear"/>
		 <macrodef name="sapcommtest_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="sapcommtest_before_production" />
		 <macrodef name="sapcommtest_after_production" />

 JUnit Test

	 before/after ant macro "yunitinit" 
		 <macrodef name="sapcommtest_before_yunitinit" />
		 <macrodef name="sapcommtest_after_yunitinit" />

	 before/after ant macro "yunit"
		 <macrodef name="sapcommtest_before_yunit" />
		 <macrodef name="sapcommtest_after_yunit" /> 
		 
 Distribution package

	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="sapcommtest_after_dist"/>
		 <macrodef name="sapcommtest_before_dist"/>

	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="sapcommtest_before_dist_copy"/>
		 <macrodef name="sapcommtest_after_dist_copy"/>

--><project name="sapcommtest_buildcallbacks">
    	
    <macrodef name="sapcommtest_clean_classpath_file">
        		
        <sequential>
            			
            <copy failonerror="true" file="${ext.sapcommtest.path}/.classpath" overwrite="true" tofile="${ext.sapcommtest.path}/.classpath.edit">
                				
                <filterchain>
                    					
                    <linecontainsregexp negate="true">
                        						
                        <regexp pattern="^(\t\t\t\t|)$"/>
                          
                        <!-- added by script -->
                        					
                    </linecontainsregexp>
                    				
                </filterchain>
                			
            </copy>
            			
            <move failonerror="true" file="${ext.sapcommtest.path}/.classpath.edit" overwrite="true" tofile="${ext.sapcommtest.path}/.classpath"/>
            		
        </sequential>
        	
    </macrodef>
    	
    <macrodef name="sapcommtest_after_clean">
        		
        <sequential>
            			
            <echo level="info" message="Generating .classpath file for sapcommtest"/>
            			
            <create_extension_classpath_file extname="sapcommtest"/>
            			
            <sapcommtest_clean_classpath_file/>
            		
        </sequential>
        	
    </macrodef>
    	
    <!-- 
		Called whenever 'ant ear' is used. this callback can be used to modify the content of the ear file

		${ear.path}: 			path to ear
	 -->
    	
    <macrodef name="sapcommtest_before_ear">
        		
        <sequential>
            			
            <!-- you can do anything before the EAR file is being packed -->
            		
        </sequential>
        	
    </macrodef>
    
</project>
